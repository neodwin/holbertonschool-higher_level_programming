>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test: Valid int
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test: Invalid type
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test: 0 value
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test: Negative value
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test: Float instead of int
>>> try:
...     bg.integer_validator("width", 12.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] width must be an integer

# Test: List instead of int
>>> try:
...     bg.integer_validator("my_list", [12])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] my_list must be an integer

# Test: Valid positive integer
>>> bg.integer_validator("height", 100)
>>> bg.integer_validator("length", 200)

# Test: Empty string as name
>>> bg.integer_validator("", 10)
>>> bg.integer_validator("", 50)

# Test: Very large integer
>>> bg.integer_validator("large_num", 999999999999)

# Test: Very small negative integer
>>> try:
...     bg.integer_validator("negative", -1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] negative must be greater than 0

# Test: Integer as a string
>>> try:
...     bg.integer_validator("string_num", "10")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] string_num must be an integer

# Test: Smallest valid integer
>>> bg.integer_validator("min_value", 1)

# Test: None as input
>>> try:
...     bg.integer_validator("none_value", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] none_value must be an integer

# Test: Tuple instead of integer
>>> try:
...     bg.integer_validator("num_tuple", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] num_tuple must be an integer

# Test: List of numbers as input
>>> try:
...     bg.integer_validator("num_list", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] num_list must be an integer

# Test: String "0" instead of zero
>>> try:
...     bg.integer_validator("zero_string", "0")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] zero_string must be an integer
