Test: Valid int
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Test: Invalid type
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

Test: 0 value
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

Test: Negative value
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Test: Float instead of int
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("width", 12.5)
Traceback (most recent call last):
    ...
TypeError: width must be an integer

Test: List instead of int
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_list", [12])
Traceback (most recent call last):
    ...
TypeError: my_list must be an integer

Test: Valid positive integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("height", 100)
>>> bg.integer_validator("length", 200)

Test: Empty string as name
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("", 10)
>>> bg.integer_validator("", 50)

Test: Very large integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("large_num", 999999999999)

Test: Very small negative integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("negative", -1)
Traceback (most recent call last):
    ...
ValueError: negative must be greater than 0

Test: Integer as a string
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("string_num", "10")
Traceback (most recent call last):
    ...
TypeError: string_num must be an integer

Test: Smallest valid integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("min_value", 1)

Test: None as input
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("none_value", None)
Traceback (most recent call last):
    ...
TypeError: none_value must be an integer

Test: Tuple instead of integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("num_tuple", (1, 2, 3))
Traceback (most recent call last):
    ...
TypeError: num_tuple must be an integer

Test: List of numbers as input
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("num_list", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: num_list must be an integer

Test: String "0" instead of zero
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("zero_string", "0")
Traceback (most recent call last):
    ...
TypeError: zero_string must be an integer
